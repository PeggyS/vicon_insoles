function open_composite_insole_fig(app, side)
% open a figure with the insole data

if ~isprop(app, 'vicon_data') 
	disp('No Vicon data available')
	return
end

if ~isfield(app.vicon_data, 'devices')
	disp('No Insole data to display')
	return
end

fig_str = ['figure_insole_' lower(side) '_composite'];
fig_pos = [1116         260         800        800];

% insole figure is saved in the main app app
app.(fig_str) = figure('Pos', fig_pos, 'Tag', fig_str, 'Name', [side ' Composite FSR Insole']);


% time 
% Frame = sec/100; Sub_Frame = milliseconds after the frame
t = app.vicon_data.devices.tbl.Frame / 100 + app.vicon_data.devices.tbl.Sub_Frame/1000;

% plot the 8 sensors data summed together
fsr_list = {'Lat_Heel', 'Med_Heel', 'Lat_Instep', 'Lat_MT', 'Center_MT', 'Med_MT', 'Lat_Toe', 'Med_Toe'};
all_fsr_data = nan(length(t), length(fsr_list));
% discover what the fsr variable name prefix is
var_prefix = find_fsr_var_prefix(app.vicon_data.devices.tbl);
for cnt = 1:8
	fsr_var = [var_prefix upper(side(1)) '_' fsr_list{cnt} '_V'];
	all_fsr_data(:,cnt) = app.vicon_data.devices.tbl.(fsr_var);
end

composite_data = sum(all_fsr_data, 2);
h_ax = axes;
h_ax.Tag = ['axes_' lower(side(1)) '_composite'];
create_axes_CMenu(h_ax)
h_line = line(t, composite_data, ...
	'Tag', ['line_fsr_' lower(side(1)) '_composite']);
ylabel('Sum of all FSRs')
title(side)
xlabel('Time (s)')

% use the calibration info to approximate force from the fsr voltage
% app.coeff


% Add listener to axes' 'XLim' 'PostSet' event (so it fires after axes
% change).  Update the xmin and xmax values shown in edit boxes.
addlistener(h_ax(1),'XLim','PostSet',@(~,~)xlimListenerFcn(h_ax));


% create uicontrols
create_uicontrols(app.(fig_str), app)

% create close function callback to uncheck the box in the app window and
% remove linkprops
checkbox_var = [upper(side(1)) lower(side(2:end)) 'InsoleCompositeCheckBox'];
app.(fig_str).CloseRequestFcn = {@close_insole_fig_fcn, app.(checkbox_var)};

return

% ---------------------------
function create_uicontrols(h_fig, app)
uicontrol(h_fig, ...
		'Style', 'checkbox', ...
		'Tag', 'show_eeg_events_chkbx', ...
		'String', {'Show EEG Events'}, ...
		'Units', 'normalized', ...
		'Position', [0.0187,0.95,0.2,0.0166], ...
		'FontSize', 12, ...
		'Value', 0, ...
		'Callback', {@pb_show_eeg_events_callback, app});
uicontrol(h_fig, ...
		'Style', 'checkbox', ...
		'Tag', 'show_hs_lat_chkbx', ...
		'String', {'Show HS'}, ...
		'Units', 'normalized', ...
		'Position', [0.0187,0.845,0.094,0.0166], ...
		'FontSize', 9, ...
		'Value', 0, ...
		'Callback', {@pb_show_insole_events_callback, 'hs_lat', app});

uicontrol(h_fig, ...
		'Style', 'edit', ...
		'Tag', 'hs_threshold_edit', ...
		'String', {'0'}, ...
		'Units', 'normalized', ...
		'Position', [0.0187,0.80,0.0588,0.0166], ...
		'FontSize', 9, ...
		'Value', 0, ...
		'Callback', {@edit_threshold_callback, 'hs_med', app});


uicontrol(h_fig, ...
		'Style', 'checkbox', ...
		'Tag', 'show_to_med_bp', ...
		'String', {'Show TO'}, ...
		'Units', 'normalized', ...
		'Position', [0.0187,0.107,0.094,0.0166], ...
		'FontSize', 9, ...
		'Value', 0, ...
		'Callback', {@pb_show_insole_events_callback, 'to_med', app});
uicontrol(h_fig, ...
		'Style', 'edit', ...
		'Tag', 'to_threshold_edit', ...
		'String', {'0'}, ...
		'Units', 'normalized', ...
		'Position', [0.0187,0.1279,0.0588,0.0166], ...
		'FontSize', 9, ...
		'Value', 0, ...
		'Callback', {@edit_threshold_callback, 'to_med', app});


	
uicontrol(h_fig, ...
		'Style', 'pushbutton', ...
		'Tag', 'save_events_pb', ...
		'String', {'Save Events'}, ...
		'Units', 'normalized', ...
		'Position', [0.0187,0.025,0.2,0.03], ...
		'FontSize', 14, ...
		'Callback', {@pb_save_events_callback, h_fig});

uicontrol(h_fig, ...
		'Style', 'edit', ...
		'Tag', 'edit_axes_min', ...
		'String', {'0'}, ...
		'Units', 'normalized', ...
		'Position', [0.1,0.075,0.0588,0.0166], ...
		'FontSize', 9, ...
		'Value', 0, ...
		'Callback', {@edit_axes_change_callback, 'x_min'});

uicontrol(h_fig, ...
		'Style','text', ...
		'String', {'x min ='}, ...
		'Units', 'normalized', ...
		'Position', [0.05 0.075 0.05 0.0166], ...
		'FontSize', 10)

uicontrol(h_fig, ...
		'Style', 'edit', ...
		'Tag', 'edit_axes_max', ...
		'String', {'0'}, ...
		'Units', 'normalized', ...
		'Position', [0.9,0.075,0.0588,0.0166], ...
		'FontSize', 9, ...
		'Value', 0, ...
		'Callback', {@edit_axes_change_callback, 'x_max'});

uicontrol(h_fig, ...
		'Style','text', ...
		'String', {'x max ='}, ...
		'Units', 'normalized', ...
		'Position', [0.85 0.075 0.05 0.0166], ...
		'FontSize', 10)

return

% ----------------------------
function create_axes_CMenu(h_ax)
hcmenu = uicontextmenu;
ud.hMenuDrag = uimenu(hcmenu, 'Label', 'Add HS', 'Tag', 'menuAddHS', 'Callback', {@menuAddEvent_Callback, h_ax});
ud.hMenuShow = uimenu(hcmenu, 'Label', 'Add TO', 'Tag', 'menuAddTO', 'Callback', {@menuAddEvent_Callback, h_ax});

set(h_ax, 'UIContextMenu', hcmenu, 'UserData', ud);
return

% -----------------------------
function xlimListenerFcn(h_ax)
h_edit = findobj(h_ax.Parent, 'Tag', 'edit_axes_min');
if ~isempty(h_edit)
	h_edit.String = {num2str(h_ax.XLim(1))};
end
h_edit = findobj(h_ax.Parent, 'Tag', 'edit_axes_max');
if ~isempty(h_edit)
	h_edit.String = {num2str(h_ax.XLim(2))};
end
return

% -----------------------------
function edit_axes_change_callback(source, ~, min_or_max)
h_fig = source.Parent;
h_ax = findobj(h_fig, '-regexp', 'Tag', '^axes_.*');
xlims = h_ax(1).XLim;
xdiff = diff(xlims);
if strcmp(min_or_max, 'x_min')
	xmin = str2double(source.String);
	if xmin > xlims(2)
		xlims =  [xmin xmin+xdiff] ;
	else
		xlims(1) = xmin;
	end
else
	xmax = str2double(source.String);
	if xmax < xlims(1)
		xlims = [xmax-xdiff xmax];
	else
		xlims(2) = xmax;
	end
end
h_ax(1).XLim = xlims;
return
